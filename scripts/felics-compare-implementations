#!/usr/bin/env python3
# SPDX-License-Identifier: GPL-3.0-or-later
# SPDX-FileCopyrightText: 2019 Airbus Cybersecurity SAS

from argparse import ArgumentParser
from collections import defaultdict, OrderedDict
import json

from felics import ARCHITECTURES, METRICS
from felics.analysis import comparison


def _group_setups(filename, options):
    with open(filename) as f:
        results = json.load(f)

    grouped = {a.codename: defaultdict(dict) for a in ARCHITECTURES}

    for setup in results['data']:
        if options is not None and options != setup['compiler_options']:
            continue
        grouped[setup['architecture']][setup['cipher_name']][setup['version']] = setup

    return OrderedDict((
        (a.codename, grouped[a.codename])
        for a in ARCHITECTURES
        if grouped[a.codename]
    ))


def _format_metrics(diffs):
    return '\n'.join(
        '    {m}: {d}'.format(m=m, d=diffs[m])
        for m in sorted(diffs, key=METRICS.index)
    )


def _format_ratios(setups, v1, v2):
    line = '{cipher}\n{metrics}'

    for cipher, values in sorted(setups.items()):
        diffs = comparison.format_differences(values[v1], values[v2])

        if not diffs:
            continue

        yield line.format(
            cipher=cipher, metrics=_format_metrics(diffs)
        )


def _arch_table(arch, lines):
    return '\n\n'.join((arch, '\n\n'.join(lines))) + '\n'


def _format_differences(setups, v1, v2):
    ratios_by_arch = (
        (arch, tuple(_format_ratios(setups[arch], v1, v2)))
        for arch in setups
    )

    return '\n'.join(
        _arch_table(arch, ratios) for arch, ratios in ratios_by_arch if ratios
    )


def _parse_arguments():
    parser = ArgumentParser()
    parser.add_argument('results')
    parser.add_argument('version1')
    parser.add_argument('version2')
    parser.add_argument('-o', '--options', required=False)

    return parser.parse_args()


def _main():
    arguments = _parse_arguments()
    setups = _group_setups(arguments.results, arguments.options)
    print('{v2} / {v1}'.format(v2=arguments.version2, v1=arguments.version1))
    print(_format_differences(setups, arguments.version1, arguments.version2))


if __name__ == '__main__':
    _main()
