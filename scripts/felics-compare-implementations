#!/usr/bin/env python3
# SPDX-License-Identifier: GPL-3.0-or-later
# SPDX-FileCopyrightText: 2019 Airbus Cybersecurity SAS

from argparse import ArgumentParser
from collections import defaultdict, OrderedDict
import json

from felics import ARCHITECTURES
from felics.analysis import comparison


_METRICS = ('code_size', 'code_ram', 'code_time')


def _group_setups(filename, options):
    with open(filename) as f:
        results = json.load(f)

    grouped = {a.codename: defaultdict(dict) for a in ARCHITECTURES}

    for setup in results['data']:
        if options is not None and options != setup['compiler_options']:
            continue
        grouped[setup['architecture']][setup['cipher_name']][setup['version']] = setup

    return OrderedDict((
        (a.codename, grouped[a.codename])
        for a in ARCHITECTURES
        if grouped[a.codename]
    ))


def _compute_differences(data1, data2):
    return (
        comparison.format((data2[m]-data1[m])/data1[m], data1[m], data2[m])
        for m in _METRICS
    )


def _format_metrics(diffs):
    return '\n'.join(
        '    {m}: {d}'.format(m=m, d=d) for (m, d) in zip(_METRICS, diffs)
    )


def _format_ratios(setups, v1, v2):
    header = '{cipher:<{pad}}'
    line = '{header}\n{metrics}'

    ciphers = setups.keys()
    pad = len(max(ciphers, key=len))

    for cipher, values in sorted(setups.items()):
        diffs = _compute_differences(values[v1], values[v2])

        yield line.format(
            header=header.format(cipher=cipher, pad=pad),
            metrics=_format_metrics(diffs)
        )


def _arch_table(arch, setups, v1, v2):
    header = arch
    content = '\n'.join(line for line in _format_ratios(setups, v1, v2))

    return '\n'.join((header, content))


def _format_setups(setups, v1, v2):
    tables = (
        _arch_table(arch, setups, v1, v2) for arch, setups in setups.items()
    )

    return '\n'.join(tables)


def _parse_arguments():
    parser = ArgumentParser()
    parser.add_argument('results')
    parser.add_argument('version1')
    parser.add_argument('version2')
    parser.add_argument('-o', '--options', required=False)

    return parser.parse_args()


def _main():
    arguments = _parse_arguments()
    setups = _group_setups(arguments.results, arguments.options)
    print('{v2} / {v1}'.format(v2=arguments.version2, v1=arguments.version1))
    print(_format_setups(setups, arguments.version1, arguments.version2))


if __name__ == '__main__':
    _main()
