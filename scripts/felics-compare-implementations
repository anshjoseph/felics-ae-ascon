#!/usr/bin/env python3
# SPDX-License-Identifier: GPL-3.0-or-later
# SPDX-FileCopyrightText: 2019 Airbus Cybersecurity SAS

from argparse import ArgumentParser
from collections import defaultdict, OrderedDict
import json

from felics import ARCHITECTURES
from felics.analysis import comparison


def _group_setups(filename, options):
    with open(filename) as f:
        results = json.load(f)

    grouped = {a.codename: defaultdict(dict) for a in ARCHITECTURES}

    for setup in results['data']:
        if options is not None and options != setup['compiler_options']:
            continue
        grouped[setup['architecture']][setup['cipher_name']][setup['version']] = setup

    return OrderedDict((
        (a.codename, grouped[a.codename])
        for a in ARCHITECTURES
        if grouped[a.codename]
    ))


def _arch_table(arch, lines):
    return '\n\n'.join((arch, '\n\n'.join(lines))) + '\n'


def _format_differences(setups, v1, v2):
    iterators = (
        (arch, (
            (setup[v1], setup[v2])
            for setup in arch_setups.values()
        ))
        for arch, arch_setups in setups.items()
    )

    setup_fmt = '{cipher_name}'

    results = (
        (arch, comparison.format_differences(pairs, setup_fmt))
        for arch, pairs in iterators
    )

    return '\n'.join(
        _arch_table(arch, ratios) for arch, ratios in results if ratios
    )


def _parse_arguments():
    parser = ArgumentParser()
    parser.add_argument('results')
    parser.add_argument('version1')
    parser.add_argument('version2')
    parser.add_argument('-o', '--options', required=False)

    return parser.parse_args()


def _main():
    arguments = _parse_arguments()
    setups = _group_setups(arguments.results, arguments.options)
    print('{v2} / {v1}'.format(v2=arguments.version2, v1=arguments.version1))
    print(_format_differences(setups, arguments.version1, arguments.version2))


if __name__ == '__main__':
    _main()
