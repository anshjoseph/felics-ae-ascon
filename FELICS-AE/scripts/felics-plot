#!/usr/bin/env python3

from collections import namedtuple, OrderedDict
import json
from subprocess import Popen
from sys import argv

import matplotlib.pyplot


class _Cipher(namedtuple('_Cipher', ('name', 'version'))):
    def __str__(self):
        return '{s.name} ({s.version})'.format(s=self)


_CipherMetric = namedtuple('_CipherMetric', ('commits', 'metrics', 'cipher'))


def _load_file(filename):
    with open(filename) as f:
        return json.load(f)


def _collect_metrics(results, metric):
    return {
        _Cipher(r['cipher_name'], r['version']): r[metric]
        for r in results
    }


def _list_ciphers(metrics):
    # metrics: OrderedDict whose values are {_Cipher ↦ metric}
    # dictionaries.

    # Grab any of these inner dictionaries, and yield its keys.
    yield from tuple(metrics.values())[0]


def _list_metrics(ciphers, cipher):
    # ciphers: list of {_Cipher ↦ metric}

    return tuple(
        metric
        for commit_ciphers in ciphers  # ciphers for a specific commit.
        for c, metric in commit_ciphers.items()
        if c == cipher
    )


def _sort_data(files, metric):
    results = (_load_file(f) for f in files)

    metrics_by_commit = OrderedDict((
        (setups['commit'], _collect_metrics(setups['data'], metric))
        for setups in results
    ))

    commits = tuple(metrics_by_commit)

    return tuple(
        _CipherMetric(
            cipher='{c.name} ({c.version})'.format(c=cipher),
            commits=commits,
            metrics=_list_metrics(metrics_by_commit.values(), cipher)
        )
        for cipher in sorted(_list_ciphers(metrics_by_commit))
    )


def _show_commit(event):
    xs = event.artist.get_xdata()

    commit = xs[event.ind][0]

    if event.ind > 0:
        rev = '{old}..{new}'.format(old=xs[event.ind-1][0], new=commit)
    else:
        rev = '{old}..{new}'.format(old=commit+'^', new=commit)

    Popen(('gitk', rev))


def _plot(data, metric):
    fig, axes = matplotlib.pyplot.subplots()

    for cm in data:
        axes.plot(cm.commits, cm.metrics, 'o-', label=str(cm.cipher), picker=5)

    axes.set_ylabel(metric)
    axes.set_ylim(bottom=0)
    axes.legend().set_visible(True)
    fig.canvas.callbacks.connect('pick_event', _show_commit)

    matplotlib.pyplot.show()


_METRIC = 'code_time'


def _main():
    data = _sort_data(argv[1:], _METRIC)
    _plot(data, _METRIC)


if __name__ == '__main__':
    _main()
