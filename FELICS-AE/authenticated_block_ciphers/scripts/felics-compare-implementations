#!/usr/bin/env python3

from collections import defaultdict, OrderedDict
import json
from sys import argv


_METRICS = ('code_size', 'code_ram', 'code_time')
_ARCHITECTURES = ('AVR', 'MSP', 'ARM', 'PC')


def _group_setups(filename):
    with open(filename) as f:
        results = json.load(f)

    grouped = {a: defaultdict(dict) for a in _ARCHITECTURES}

    for setup in results['data']:
        grouped[setup['architecture']][setup['cipher_name']][setup['version']] = setup

    return OrderedDict((
        (a, grouped[a])
        for a in sorted(grouped, key=_ARCHITECTURES.index)
        if grouped[a]
    ))


def _format_diff(diff, value1, value2):
    red = '\N{ESCAPE}[01;31m'
    green = '\N{ESCAPE}[01;32m'
    reset = '\N{ESCAPE}[0m'

    template = '{color}{diff:+.2%}{reset} ({v1} {arrow} {v2})'
    arguments = {'diff': diff, 'v1': value1, 'v2': value2, 'reset': reset}

    if diff < 0:
        arguments['color'] = green
        arguments['arrow'] = '↘'
    else:
        arguments['color'] = red
        arguments['arrow'] = '↗'

    return template.format_map(arguments)


def _compute_differences(data1, data2):
    return (_format_diff((data2[m]-data1[m])/data1[m], data1[m], data2[m])
            for m in _METRICS)


def _format_metrics(diffs):
    return '\n'.join(
        '    {m}: {d}'.format(m=m, d=d) for (m, d) in zip(_METRICS, diffs)
    )


def _format_ratios(setups, v1, v2):
    header = '{cipher:<{pad}}'
    line = '{header}\n{metrics}'

    ciphers = setups.keys()
    pad = len(max(ciphers, key=len))

    for cipher, values in sorted(setups.items()):
        diffs = _compute_differences(values[v1], values[v2])

        yield line.format(
            header=header.format(cipher=cipher, pad=pad),
            metrics=_format_metrics(diffs)
        )


def _arch_table(arch, setups, v1, v2):
    header = arch
    content = '\n'.join(line for line in _format_ratios(setups, v1, v2))

    return '\n'.join((header, content))


def _format_setups(setups, v1, v2):
    tables = (
        _arch_table(arch, setups, v1, v2) for arch, setups in setups.items()
    )

    return '\n'.join(tables)


def _main(results_filename, version1, version2):
    setups = _group_setups(results_filename)
    print('{v2} / {v1}'.format(v2=version2, v1=version1))
    print(_format_setups(setups, version1, version2))


if __name__ == '__main__':
    _main(argv[1], argv[2], argv[3])
