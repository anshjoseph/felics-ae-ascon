#!/usr/bin/env python3

from argparse import ArgumentParser
from contextlib import contextmanager
from datetime import datetime
from os import path
import re
from subprocess import run
from sys import argv

import git


_SCRIPTS_DIR = path.dirname(path.realpath(argv[0]))
_ROOT_DIR = path.join(_SCRIPTS_DIR, path.pardir)
_CIPHERS_DIR = path.join(_ROOT_DIR, 'source', 'ciphers')
_RESULTS_DIR = path.join(_ROOT_DIR, 'results')

_ARCHITECTURES = 'AVR MSP ARM PC'


def _default_output_filename():
    date = datetime.now().strftime('%Y.%m.%d-%H.%M.%S')

    try:
        repo = git.Repo(path=_SCRIPTS_DIR, search_parent_directories=True)
    except git.GitError:
        return '{date}.json'.format(date=date)

    try:
        ref = repo.git.symbolic_ref('HEAD', short=True)
    except git.GitCommandError:
        ref = repo.git.show(format='format:%h', no_patch=True)

    return '{date}-{ref}.json'.format(date=date, ref=ref)


def _parse_arguments():
    parser = ArgumentParser()
    parser.add_argument(
        'ciphers', nargs='+',
        help='List of cipher folders in source/ciphers; globs are supported.'
    )
    parser.add_argument(
        '-a', '--architectures', default=_ARCHITECTURES,
        help='Space-separated list of platforms; default: "{a}"'.format(a=_ARCHITECTURES)
    )
    parser.add_argument(
        '--options', default='-O3',
        help='Semicolon-separated list of compiler options; default: "-O3"'
    )

    default_output = _default_output_filename()
    parser.add_argument(
        '-o', '--output',
        default=default_output,
        help='default: {o}'.format(
            o=path.relpath(path.join(_RESULTS_DIR, default_output), _ROOT_DIR)
        )
    )

    return parser.parse_args()


def _cpufreq_set(cpu, governor):
    run(('sudo', 'cpufreq-set', '-c', cpu, '-g', governor), check=True)


@contextmanager
def _cpu_performance():
    constants_file = path.join(_SCRIPTS_DIR, 'constants', 'constants.sh')
    cpu_pattern = r'PC_EXECUTION_TIME_CPU=(\d+)'

    with open(constants_file) as constants:
        cpu = re.search(cpu_pattern, constants.read()).group(1)

    try:
        _cpufreq_set(cpu, 'performance')
        yield
    finally:
        _cpufreq_set(cpu, 'powersave')


def _run_felics(ciphers, architectures, compiler_options, output):
    command = (
        path.join(_SCRIPTS_DIR, 'collect_ciphers_metrics.sh'),
        '-c='+' '.join(ciphers),
        '-a='+architectures,
        '-co='+compiler_options,
        '-j='+output
    )

    with _cpu_performance():
        run(command, check=True)


def _show_results(output):
    command = (path.join(_SCRIPTS_DIR, 'felics-publish'),
               path.join(_RESULTS_DIR, output))

    run(command, check=True)


if __name__ == '__main__':
    args = _parse_arguments()

    _run_felics(args.ciphers, args.architectures, args.options, args.output)
    _show_results(args.output)
