#!/usr/bin/env python3

from collections import namedtuple

import json
import sys


Results = namedtuple('Results', ('commit', 'data'))


if len(sys.argv) != 3:
    print('usage: {} FILE1 FILE2'.format(sys.argv[0]))
    sys.exit(1)


def _make_key(data):
    keys = ('scenario', 'cipher_name', 'architecture', 'block_size',
            'key_size', 'version', 'language', 'compiler_options')

    return tuple(data[k] for k in keys)


def _make_value(data):
    keys = ('code_size', 'code_ram', 'code_time')

    return {k: data[k] for k in keys}


def _open_file(name):
    with open(name) as f:
        results = json.load(f)

    data = {
        _make_key(item): _make_value(item) for item in results['data']
    }

    return Results(results['commit'], data)


def _format_diff(value1, value2):
    red = '\N{ESCAPE}[01;31m'
    green = '\N{ESCAPE}[01;32m'
    reset = '\N{ESCAPE}[0m'

    relative_diff = (value2 - value1) / value1

    template = '{color}{diff:+.2%}{reset} ({v1} {arrow} {v2})'
    arguments = {'diff': relative_diff, 'v1': value1, 'v2': value2,
                 'reset': reset}

    if relative_diff < 0:
        arguments['color'] = green
        arguments['arrow'] = '↘'
    else:
        arguments['color'] = red
        arguments['arrow'] = '↗'

    return template.format_map(arguments)


def _show_diff(setup, metric, value1, value2):
    if value1 == value2:
        return

    print('{setup}: {metric}: {diff}'.format(
        setup=setup, metric=metric, diff=_format_diff(value1, value2)
    ))


file1 = _open_file(sys.argv[1])
file2 = _open_file(sys.argv[2])


print('Comparing {old}..{new}'.format(old=file1.commit, new=file2.commit))


for setup in sorted(file1.data):
    data1 = file1.data[setup]
    data2 = file2.data[setup]

    for metric in sorted(data1):
        value1 = data1[metric]
        value2 = data2[metric]

        _show_diff(setup, metric, value1, value2)
