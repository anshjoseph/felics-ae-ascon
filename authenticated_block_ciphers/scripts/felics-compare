#!/usr/bin/env python3

from argparse import ArgumentParser
from collections import namedtuple
import json


Results = namedtuple('Results', ('commit', 'data'))


METRICS = ('code_size', 'code_ram', 'code_time')


def _parse_arguments():
    parser = ArgumentParser()
    parser.add_argument('file1')
    parser.add_argument('file2')
    parser.add_argument(
        '--threshold', default=0.01, type=float,
        help='hide difference when abs(old-new)/old < THRESHOLD'
    )
    return parser.parse_args()


def _make_key(data):
    keys = ('scenario', 'cipher_name', 'architecture', 'block_size',
            'key_size', 'version', 'language', 'compiler_options')

    return tuple(data[k] for k in keys)


def _open_file(name):
    with open(name) as f:
        results = json.load(f)

    data = {
        _make_key(item): item for item in results['data']
    }

    return Results(results['commit'], data)


def _format_diff(diff, value1, value2):
    red = '\N{ESCAPE}[01;31m'
    green = '\N{ESCAPE}[01;32m'
    reset = '\N{ESCAPE}[0m'

    template = '{color}{diff:+.2%}{reset} ({v1} {arrow} {v2})'
    arguments = {'diff': diff, 'v1': value1, 'v2': value2,
                 'reset': reset}

    if diff < 0:
        arguments['color'] = green
        arguments['arrow'] = '↘'
    else:
        arguments['color'] = red
        arguments['arrow'] = '↗'

    return template.format_map(arguments)


def _show_differences(differences, data1, data2):
    for metric in METRICS:      # Show them in the "canonical" order.
        if metric not in differences:
            continue

        diff = _format_diff(differences[metric], data1[metric], data2[metric])

        print('\t{metric}: {diff}'.format(metric=metric, diff=diff))


def _compute_differences(threshold, data1, data2):
    differences = (
        (data2[metric] - data1[metric]) / data1[metric]
        for metric in sorted(METRICS)
    )

    return {
        METRICS[i]: relative_diff
        for i, relative_diff in enumerate(differences)
        if abs(relative_diff) > threshold
    }


arguments = _parse_arguments()
file1 = _open_file(arguments.file1)
file2 = _open_file(arguments.file2)


print('Comparing {old}..{new} (tolerance: {t:.2%})'.format(
    old=file1.commit, new=file2.commit, t=arguments.threshold)
)
print()


SETUP_TEMPLATE = ('{cipher_name}-{block_size}-{key_size} on {architecture} '
                  '(v{version} in {language} with {compiler_options})')

skipped = []

for setup, data1 in sorted(file1.data.items()):

    formatted_setup = SETUP_TEMPLATE.format_map(data1)

    if setup not in file2.data:
        skipped.append(formatted_setup)
        continue

    data2 = file2.data[setup]

    differences = _compute_differences(arguments.threshold, data1, data2)

    if not differences:
        continue

    print(formatted_setup)

    _show_differences(differences, data1, data2)

    print()

if skipped:
    print('Setups not found in {f2}:'.format(f2=arguments.file2))
    print('\n'.join('\t'+setup for setup in skipped))
