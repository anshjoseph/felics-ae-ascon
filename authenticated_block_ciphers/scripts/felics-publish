#!/usr/bin/env python3

from argparse import ArgumentParser
from collections import defaultdict, OrderedDict
import json
from os import path

import pyexcel_ods
import pyexcel_xlsx


_METRICS = ('code_size', 'code_ram', 'code_time')


def _parse_arguments():
    parser = ArgumentParser()
    parser.add_argument('-o', '--out', dest='output')
    parser.add_argument('results')
    return parser.parse_args()


def _order_data(data):
    def make_key(setup):
        return (setup['compiler_options'], setup['cipher_name'])

    return sorted(data, key=make_key)


def _group_by_architecture(data):
    data_by_arch = defaultdict(list)

    for setup in data:
        data_by_arch[setup['architecture']].append(setup)

    widths = {'AVR': 8, 'MSP': 16, 'ARM': 32, 'PC': 64}

    return OrderedDict(
        (key, _order_data(data_by_arch[key]))
        for key in sorted(data_by_arch, key=widths.get)
    )


class SpreadsheetWriter:

    _MODULES = {
        '.xlsx': pyexcel_xlsx,
        '.ods': pyexcel_ods
    }

    _SHEET_COLUMNS = OrderedDict((
        ('cipher_name', 'Designation'),
        ('key_size', 'Key size (bits)'),
        ('version', 'Version'),
        ('language', 'Language'),
        ('compiler_options', 'Compiler options'),
        ('code_size', 'Size (bytes)'),
        ('code_ram', 'RAM (bytes)'),
        ('code_time', 'Execution time (cycles)')
    ))

    def __init__(self, output):
        self._output = output

    def _make_rows(self, data):
        header = tuple(self._SHEET_COLUMNS.values())
        rows = (tuple(setup[c] for c in self._SHEET_COLUMNS) for setup in data)
        return (header,) + tuple(rows)

    def dump(self, results):
        spreadsheet_data = OrderedDict(
            (arch, self._make_rows(data))
            for arch, data in results.items()
        )

        _, ext = path.splitext(self._output)
        self._MODULES[ext].save_data(self._output, spreadsheet_data)


class TexWriter:

    _TABLE_TEMPLATE = r'''
\begin{{table}}[H]
  \centering
  \begin{{tabular}}{{l|l|l||r|r|r}}
{rows}
  \end{{tabular}}
  \caption{{{caption}}}
  \label{{table:bench-soft-{arch}}}
\end{{table}}
'''[1:]                         # Remove first newline.

    _COLUMNS = OrderedDict((
        ('cipher_name', ''),
        ('version', 'Version'),
        ('compiler_options', r'\texttt{CFLAGS}'),
        ('code_size', 'Code size (B)'),
        ('code_ram', 'RAM (B)'),
        ('code_time', 'Execution time (cycles)')
    ))

    _PLATFORM_NAMES = {
        'AVR': 'AVR ATmega128',
        'MSP': 'MSP430F1611',
        'ARM': 'ARM Cortex-M3',
        'PC': 'PC'
    }

    def __init__(self, output):
        self._output = output

    def _pad_cell(self, value, padding, alignment):
        return '{value:{alignment}{width}}'.format(
            value=value,
            width=padding,
            alignment=alignment
        )

    def _extract_row_data(self, setup):
        def raw(value):
            return str(value)

        def smallcap(value):
            return r'\textsc{{{}}}'.format(value)

        def texttt(value):
            return r'\texttt{{{}}}'.format(value)

        formatters = defaultdict(
            lambda: raw,
            cipher_name=smallcap,
            version=texttt,
            compiler_options=texttt
        )

        return tuple(formatters[c](setup[c]) for c in self._COLUMNS)

    def _cell_alignment(self, column_index):
        column_names = tuple(self._COLUMNS)

        if column_names[column_index] in _METRICS:
            return '>'

        return '<'

    def _pad_row_cells(self, row, paddings):
        return (
            self._pad_cell(cell, paddings[c], self._cell_alignment(c))
            for c, cell in enumerate(row)
        )

    def _make_padded_rows(self, data):
        header = tuple(self._COLUMNS.values())
        rows = (header,) + tuple(self._extract_row_data(setup) for setup in data)

        columns_nb = len(header)
        max_lengths = [
            max(len(row[c]) for row in rows)
            for c in range(columns_nb)
        ]

        return (
            self._pad_row_cells(row, max_lengths)
            for row in rows
        )

    def _format_row(self, row):
        return '      ' + ' & '.join(row) + r' \\ \hline'

    def _generate_rows(self, data):
        return '\n'.join(
            self._format_row(row) for row in self._make_padded_rows(data)
        )

    def _make_table(self, architecture, data):
        return self._TABLE_TEMPLATE.format(
            rows=self._generate_rows(data),
            arch=architecture.lower(),
            caption='Performance results on {arch}.'.format(
                arch=self._PLATFORM_NAMES[architecture]
            )
        )

    def dump(self, results):
        tables = (
            self._make_table(arch, data)
            for arch, data in results.items()
        )

        with open(self._output, 'w') as output:
            output.write('\n'.join(tables))


class ConsoleWriter:

    _ROW_HEADER_TEMPLATE = '{cipher_name} ({version}, {compiler_options}):'
    _ROW_TEMPLATE = '{header:<{header_width}} {code_size:>{code_size_width}} {code_ram:>{code_ram_width}} {code_time:>{code_time_width}}'

    def _find_widest_value(self, metric, setups):
        return max(len(s[metric]) for s in setups)

    def _format_rows(self, data):
        def header(setup):
            return self._ROW_HEADER_TEMPLATE.format_map(setup)

        def values(setup):
            return {m: str(setup[m]) for m in _METRICS}

        results = OrderedDict((header(setup), values(setup))
                              for setup in data)

        metrics_widths = {
            m + '_width': self._find_widest_value(m, results.values())
            for m in _METRICS
        }

        return (
            self._ROW_TEMPLATE.format(
                header=header,
                header_width=max(len(header) for header in results),
                **_METRICS,
                **metrics_widths
            )
            for header, _METRICS in results.items()
        )

    def dump(self, results):
        for arch, data in results.items():
            print('On {arch}'.format(arch=arch))
            print('\n'.join(self._format_rows(data)))
            print()


def _make_writer(output_filename):
    if output_filename is None:
        return ConsoleWriter()
    if output_filename.endswith(('.ods', 'xlsx')):
        return SpreadsheetWriter(output_filename)
    if output_filename.endswith('.tex'):
        return TexWriter(output_filename)

    raise ValueError('{f}: unsupported extension'.format(f=output_filename))


if __name__ == '__main__':
    arguments = _parse_arguments()

    with open(arguments.results) as results_file:
        raw_results = json.load(results_file)['data']

    results_by_arch = _group_by_architecture(raw_results)

    writer = _make_writer(arguments.output)
    writer.dump(results_by_arch)
