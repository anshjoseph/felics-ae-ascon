#!/usr/bin/env python3

from argparse import ArgumentParser
from collections import defaultdict, OrderedDict
import json
from os import path
import re

import pyexcel_ods
import pyexcel_xlsx


def _parse_arguments():
    parser = ArgumentParser()
    parser.add_argument('-o', '--out', dest='output')
    parser.add_argument('results')
    return parser.parse_args()


def _sort_by_architecture(data):
    sorted_data = defaultdict(list)

    for setup in data:
        sorted_data[setup['architecture']].append(setup)

    widths = {'AVR': 8, 'MSP': 16, 'ARM': 32, 'PC': 64}

    return OrderedDict(
        (key, sorted_data[key]) for key in sorted(sorted_data, key=widths.get)
    )


class SpreadsheetWriter:

    _MODULES = {
        '.xlsx': pyexcel_xlsx,
        '.ods': pyexcel_ods
    }

    _SHEET_COLUMNS = OrderedDict((
        ('cipher_name', 'Designation'),
        ('key_size', 'Key size (bits)'),
        ('version', 'Version'),
        ('language', 'Language'),
        ('compiler_options', 'Compiler options'),
        ('code_size', 'Size (bytes)'),
        ('code_ram', 'RAM (bytes)'),
        ('code_time', 'Execution time (cycles)')
    ))

    def __init__(self, results, output):
        self._results = results
        self._output = output

    def _make_rows(self, data):
        header = tuple(self._SHEET_COLUMNS.values())
        rows = (tuple(setup[c] for c in self._SHEET_COLUMNS) for setup in data)
        return (header,) + tuple(rows)

    def dump(self):
        spreadsheet_data = OrderedDict(
            (arch, self._make_rows(data))
            for arch, data in self._results.items()
        )

        _, ext = path.splitext(self._output)
        self._MODULES[ext].save_data(self._output, spreadsheet_data)


class TexWriter:

    _TABLE_TEMPLATE = r'''
\begin{{table}}[H]
  \begin{{center}}
    \begin{{tabular}}{{l|r|r|r}}
{rows}
    \end{{tabular}}
    \caption{{{caption}}}
    \label{{table:bench-soft-{arch}}}
  \end{{center}}
\end{{table}}
'''[1:]                         # Remove first newline.

    _PLATFORM_NAMES = {
        'AVR': 'AVR ATmega128',
        'MSP': 'MSP430F1611',
        'ARM': 'ARM Cortex-M3',
        'PC': 'PC'
    }

    def __init__(self, results, output):
        self._results = results
        self._output = output

    def _pad_cell(self, value, padding, column_index):
        return '{value:{alignment}{width}}'.format(
            value=value,
            width=padding,
            alignment='<' if column_index == 0 else '>'
        )

    def _extract_row_data(self, setup):
        # TODO: define list of column formatters.
        return (
            r'\textsc{{{cipher_name}}}'.format_map(setup),
            str(setup['code_size']),
            str(setup['code_ram']),
            str(setup['code_time'])
        )

    def _make_padded_rows(self, data):
        header = ('', 'Code size (B)', 'RAM (B)', 'Execution time (cycles)')
        rows = (header,) + tuple(self._extract_row_data(setup) for setup in data)

        columns_nb = len(header)
        max_lengths = [
            max(len(row[column]) for row in rows)
            for column in range(columns_nb)
        ]

        return (
            (self._pad_cell(cell, max_lengths[c], c)
             for c, cell in enumerate(row))
            for row in rows
        )

    def _format_row(self, row):
        return '      ' + ' & '.join(row) + r' \\ \hline'

    def _generate_rows(self, data):
        return '\n'.join(
            self._format_row(row) for row in self._make_padded_rows(data)
        )

    def _make_table(self, architecture, data):
        return self._TABLE_TEMPLATE.format(
            rows=self._generate_rows(data),
            arch=architecture.lower(),
            caption='Performance results on {arch}'.format(
                arch=self._PLATFORM_NAMES[architecture]
            )
        )

    def dump(self):
        tables = (
            self._make_table(arch, data)
            for arch, data in self._results.items()
        )

        with open(self._output, 'w') as output:
            output.write('\n'.join(tables))


_STDOUT_PREFIX_TEMPLATE = '{cipher_name}-{key_size} ({version}, {compiler_options}):'
_STDOUT_LINE_TEMPLATE = '{prefix:<{prefix_width}} {code_size:>{code_size_width}} {code_ram:>{code_ram_width}} {code_time:>{code_time_width}}'


def _make_line_values(prefix, prefix_width, metrics, metrics_widths):
    return {'prefix': prefix, 'prefix_width': prefix_width, **metrics, **metrics_widths}


def _format_stdout_lines(results):
    metrics = ('code_size', 'code_ram', 'code_time')

    results = OrderedDict((
        (
            _STDOUT_PREFIX_TEMPLATE.format_map(setup),
            {m: setup[m] for m in metrics}
        )
    ) for setup in results)

    metrics_widths = {
        m+'_width': max(len(str(values[m])) for values in results.values())
        for m in metrics
    }

    prefix_width = max(len(p) for p in results)

    return (
        _STDOUT_LINE_TEMPLATE.format_map(
            _make_line_values(prefix, prefix_width, metrics, metrics_widths)
        )
        for prefix, metrics in results.items()
    )


def _dump_to_stdout(results):
    for arch, data in results.items():
        print('On {arch}'.format(arch=arch))
        print('\n'.join(_format_stdout_lines(data)))
        print()


def _convert(results, output_filename):
    if output_filename is None:
        _dump_to_stdout(results)
    elif output_filename.endswith(('.ods', 'xlsx')):
        SpreadsheetWriter(results, output_filename).dump()
    elif output_filename.endswith('.tex'):
        TexWriter(results, output_filename).dump()
    else:
        raise ValueError('{f}: unsupported extension'.format(f=output_filename))


if __name__ == '__main__':
    arguments = _parse_arguments()

    with open(arguments.results) as results_file:
        raw_results = json.load(results_file)['data']

    sorted_results = _sort_by_architecture(raw_results)

    _convert(sorted_results, arguments.output)
